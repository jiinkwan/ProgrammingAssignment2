## Put comments here that give an overall description of what your
## functions do

## Write a short comment describing this function
## This function creates a special "matrix" object that can cache its inverse.
## input  : matrix
## output : matrix 

makeCacheMatrix <- function(x = matrix()) {
    ##tempMatrix    <- matrix(NA , nrow = nrow(x), ncol = ncol(x))
    #m <- matrix(NA , ncol = ncol(x), nrow = nrow(x))
    m <- NULL
    om <- NULL ## Variable for Original Matrix
    set <- function(y) {
      x <<- y
      m <<- NULL
      om <<-- NULL 
    }
    get <- function() x
    setinverse <- function(mat) m <<- mat ## Setting inverse matrix of the original matrix
    setoriginal <- function(originalMat) om <<-- originalMat ## Setting the original matrix
    getinverse <- function() m
    getoriginal <- function() om ## Getting Original Matrix
    list(set = set, get = get,
         setinverse = setinverse,
         setoriginal = setoriginal, 
         getinverse = getinverse,
         getoriginal = getoriginal) 
}


## Write a short comment describing this function
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed),
## then cachesolve retrieves the inverse from the cache.
## input  : matrix
## output : matrix

cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
        m <- x$getinverse()
        om <- x$getoriginal() ## Getting original matrix and assign it to om
        if(!is.null(m) & (x == om)){ ## check if m is null and parameter x is equal to chached original matrix
            message("getting cached data")
            return(m)
        }
        data <- x$get()
        m <- solve(data, ...)
        x$setinverse(m)
        m
}
