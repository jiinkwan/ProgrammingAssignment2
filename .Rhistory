library(matlib)
x <- matrix(1:4, 2,2)
x
x''
x``
x <- matrix(2,2)
x
x <- matrix(,2,2)
x
source('C:/Users/hongji/GitHub/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(x)
x <- matrix(1:4, 2,2)
makeCacheMatrix(x)
makeCacheMatrix(x)
x
makeCacheMatrix(x)
x
makeCacheMatrix(x)
x
for(i in 1:nrow(x)){}
for(i in 1:nrow(x)){for(j in 1:ncol(x)){im[j,i] < x[i,j]}}
im <- matrix(NA, ncol = ncol(x), nrow = nrow(x))
for(i in 1:nrow(x)){for(j in 1:ncol(x)){im[j,i] < x[i,j]}}
im
for(i in 1:nrow(x)){for(j in 1:ncol(x)){im[j,i] <- x[i,j]}}
im
x < c(1:5)
x <- c(1:5)
source('C:/Users/hongji/GitHub/ProgrammingAssignment2/makeVector.R')
source('C:/Users/hongji/GitHub/ProgrammingAssignment2/cachemean.R')
makeVector(x)
cachemean(x)
cachemean(makeVector())
cachemean(makeVector(X))
cachemean(makeVector(x))
source('C:/Users/hongji/GitHub/ProgrammingAssignment2/cachematrix.R')
x <- matrix(1:4, 2,2)
cacheSolve(x)
x
x
x
x
makeCacheMatrix(cacheSolve(x))
source('C:/Users/hongji/GitHub/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/hongji/GitHub/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/hongji/GitHub/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/hongji/GitHub/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(cacheSolve(x))
x <- c(1:10, 5,2)
x
x <- c(1:10, 5,2)
x
x <- matric(1:10, 5,2)
x <- matrix(1:10, 5,2)
x
cacheSolve(x)
x
cacheSolve(x)
makeCacheMatrix(cacheSolve(x))
source('C:/Users/hongji/GitHub/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(cacheSolve(x))
cacheSolve(x)
cacheSolve(x)
x <- matrix(1:4, 2,2)
cacheSolve(x)
source('C:/Users/hongji/GitHub/ProgrammingAssignment2/cachemean.R')
source('C:/Users/hongji/GitHub/ProgrammingAssignment2/makeVector.R')
cachemean(c(1:5))
cacheSolve(x)
source('C:/Users/hongji/GitHub/ProgrammingAssignment2/makeVector.R')
View(makeCacheMatrix)
source('C:/Users/hongji/GitHub/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/hongji/GitHub/ProgrammingAssignment2/makeVector.R')
cachemean(c(1:5)
)
cachemean(1:5)
source('C:/Users/hongji/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
x <- matrix(1:4,2,2)
cacheSolve(x)
View(cacheSolve)
View(makeCacheMatrix)
makeCacheMatrix(x)
gc()
makeCacheMatrix(x)
View(makeCacheMatrix)
cacheSolve(x)
rm(list = ls())
.rs.restartR()
source('C:/Users/hongji/GitHub/ProgrammingAssignment2/cachematrix.R')
x <- matrix(1:4, 2,2)
cacheSolve(x)
x$getmatrix()
View(x)
x
for(i in nrow(x)) {for(j in ncol(x)){x_1[i,j] <- x[j,i]}}
for(i in nrow(x)) {for(j in ncol(x)){x1[i,j] <- x[j,i]}}
x1 <- matrix(NA, 2,2)
for(i in nrow(x)) {for(j in ncol(x)){x1[i,j] <- x[j,i]}}
x1
for(i in nrow(x)) {for(j in ncol(x)){x1[j,i] <- x[i,j]}}
for(i in nrow(x)) {for(j in ncol(x)){x1[i,j] <- x[i,j]}}
x1
for(i in nrow(x)) {for(j in ncol(x)){x1[i,j] <- x[j,i]}}
for(i in 1:nrow(x)) {
for (j in 1:ncol(x)) {
m[i,j] <- x[j,i]
}
}
source('C:/Users/hongji/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
source('C:/Users/hongji/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
makeCacheMatrix(cacheSolve(x))
makeCacheMatrix(cacheSolve(matrix(1:4,2,2)))
makeCacheMatrix()
source('C:/Users/hongji/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
is.recursive(x)
source('C:/Users/hongji/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
source('C:/Users/hongji/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
source('C:/Users/hongji/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
source('C:/Users/hongji/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
traceback()
cacheSolve(x)
debug()
debug(cacheSolve)
cacheSolve(x)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
im <- x$getmatrix()
##im <- x[getmatrix()]
if(!is.null(im)) {
message("getting cached matrix")
return(im)
}
data <- x$get()
im <- for(i in 1:nrow(x)) {
for (j in 1:ncol(x)) {
im[i,j] <- x[j,i]
}
}
x$setmatrix(im)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
im <- x$getmatrix()
##im <- x[getmatrix()]
if(!is.null(im)) {
message("getting cached matrix")
return(im)
}
data <- x$get()
im <- for(i in 1:nrow(x)) {
for (j in 1:ncol(x)) {
im[i,j] <- x[j,i]
}
}
x$setmatrix(im)
}
debug(cacheSolve)
##im <- x[getmatrix()]
if(!is.null(im)) {
message("getting cached matrix")
return(im)
}
debug(cacheSolve)
debug(cacheSolve)
cacheSolve(x)
cacheSolve(x)
is.recursive(x)
x(1:6, 3,2)
x <- matrix(1:6, 3,2)
x
cacheSolve(x)
source('C:/Users/hongji/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
source('C:/Users/hongji/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
x <- matrix(C(1:6),6,6)
x <- matrix(1:6,6,6)
x
is.matrix(x)
is.recursive(x)
cacheSolve(x)
source('C:/Users/hongji/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
debug(cacheSolve)
cacheSolve(x)
cacheSolve(x)
source('C:/Users/hongji/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
cacheSolve(x)
mat <- matrix(1:9, 3, 3)
mat
m1 <- makeCacheMatrix(mat)
cacheSolve(mat)
cacheSolve(m1)
source('C:/Users/hongji/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(mat)
m1 <- makeCacheMatrix(mat)
cacheSolve(mat)
cacheSolve(m1)
m1 <- makeCacheMatrix(mat)
cacheSolve(m1)
source('C:/Users/hongji/GitHub/ProgrammingAssignment2/cachematrix.R')
x <- (1:4,2,2)
x <- matrix(1:4,2,2)
x
makeCacheMatrix(x)
cacheSolve(x)
m1 <- makeCacheMatrix(x)
cacheSolve(m1)
m1
cacheSolve(m1)
cacheSolve(m1)
m1 <- makeCacheMatrix(x)
cacheSolve(m1)
cacheSolve(m1)
cacheSolve(x)
source('C:/Users/hongji/GitHub/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
m1 <- makeCacheMatrix(x)
cacheSolve(m1)
source('C:/Users/hongji/GitHub/ProgrammingAssignment2/cachematrix.R')
m1 <- makeCacheMatrix(x)
cacheSolve(m1)
cacheSolve(x)
cacheSolve(m1)
cacheSolve(m1)
?solve
